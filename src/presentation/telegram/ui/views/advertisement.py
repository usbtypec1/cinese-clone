from collections.abc import Iterable

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from domain.entities.advertisement import Advertisement
from infrastructure.sqla.models.advertisement import (
    AdvertisementType,
    ProductCondition,
    DeliveryOption,
)
from presentation.telegram.filters.callback_data.advertisement.create import (
    AdvertisementTypeCallbackData,
    AdvertisementCategoryCallbackData,
    AdvertisementProductConditionCallbackData,
    AdvertisementDeliveryOptionCallbackData,
    AdvertisementCityCallbackData,
    AdvertisementPhoneNumberVisibilityCallbackData,
)
from presentation.telegram.ui.views.base import TextView


class AdvertisementTypeListView(TextView):
    text = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è:'
    reply_markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text='üõí –ü—Ä–æ–¥–∞—é',
                    callback_data=AdvertisementTypeCallbackData(
                        type=AdvertisementType.BUY,
                    ).pack(),
                ),
            ],
            [
                InlineKeyboardButton(
                    text='üëÄ –ò—â—É',
                    callback_data=AdvertisementTypeCallbackData(
                        type=AdvertisementType.SELL,
                    ).pack(),
                ),
            ],
            [
                InlineKeyboardButton(
                    text='üîÅ –û–±–º–µ–Ω',
                    callback_data=AdvertisementTypeCallbackData(
                        type=AdvertisementType.EXCHANGE,
                    ).pack(),
                ),
            ],
        ],
    )


class AdvertisementCategoryListView(TextView):
    text = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:'

    def __init__(self, categories: Iterable):
        self.__categories = tuple(categories)

    def get_reply_markup(self) -> InlineKeyboardMarkup:
        keyboard = InlineKeyboardBuilder()
        for category in self.__categories:
            keyboard.button(
                text=category.name,
                callback_data=AdvertisementCategoryCallbackData(
                    category_id=category.id,
                ),
            )
        keyboard.adjust(1)
        return keyboard.as_markup()


class AdvertisementProductTitleView(TextView):
    text = (
        'üéá –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n\n'
        '–ö–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ —Ç–æ–≤–∞—Ä (–Ω–∞–∑–≤–∞–Ω–∏–µ, –±—Ä–µ–Ω–¥, –º–æ–¥–µ–ª—å, –≥–æ–¥ –∏ —Ç–ø)\n\n'
        '–ù–∞–ø—Ä–∏–º–µ—Ä: <b>Subaru Outback 2021.</b>'
    )


class AdvertisementProductConditionView(TextView):
    text = 'ü§© –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'
    reply_markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text='–ù–æ–≤—ã–π',
                    callback_data=AdvertisementProductConditionCallbackData(
                        condition=ProductCondition.NEW,
                    ).pack(),
                ),
                InlineKeyboardButton(
                    text='–ù–µ –Ω–æ–≤—ã–π',
                    callback_data=AdvertisementProductConditionCallbackData(
                        condition=ProductCondition.USED,
                    ).pack(),
                )
            ]
        ],
    )


class AdvertisementProductPhotosView(TextView):
    text = (
        'üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞\n\n'
        '–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π'
        ' –∫–∞–∫ –∞–ª—å–±–æ–º –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø—Ä–∏ —ç—Ç–æ–º <b>–Ω–µ –±–æ–ª–µ–µ 10 —à—Ç—É–∫</b>'
    )


class AdvertisementProductDescriptionView(TextView):
    text = (
        'üñäÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n\n'
        '–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ–π —Ç–æ–≤–∞—Ä –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ\n\n'
        '–ù–∞–ø—Ä–∏–º–µ—Ä: —Ä–∞–º–∞ –∏ –≤–∏–ª–∫–∞ —Å—Ç–∞–ª—å, —Ä–∞–∑–º–µ—Ä 52, –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Å—Ç–æ–∫–æ–≤–æ–µ,'
        ' —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ö–æ—Ä–æ—à–µ–µ, –µ—Å—Ç—å —Ü–∞—Ä–∞–ø–∏–Ω—ã.'
    )


class AdvertisementProductPriceView(TextView):
    text = (
        'üíµ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞\n\n'
        '–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É —á–∏—Å–ª–æ–º –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã\n\n'
        '–ù–∞–ø—Ä–∏–º–µ—Ä: 16000'
    )


class AdvertisementDeliveryOptionView(TextView):
    text = 'üöö –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏:'
    reply_markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text='üö´ –ë–µ–∑ –¥–æ—Å—Ç–∞–≤–∫–∏',
                    callback_data=AdvertisementDeliveryOptionCallbackData(
                        option=DeliveryOption.NO_DELIVERY,
                    ).pack(),
                ),
            ],
            [
                InlineKeyboardButton(
                    text='üåç –ü–æ —Å—Ç—Ä–∞–Ω–µ',
                    callback_data=AdvertisementDeliveryOptionCallbackData(
                        option=DeliveryOption.COUNTRY,
                    ).pack(),
                ),
            ],
            [
                InlineKeyboardButton(
                    text='üåç –ü–æ –°–ù–ì',
                    callback_data=AdvertisementDeliveryOptionCallbackData(
                        option=DeliveryOption.CIS,
                    ).pack(),
                ),
            ],
            [
                InlineKeyboardButton(
                    text='üåè –ü–æ –≤—Å–µ–º—É –º–∏—Ä—É',
                    callback_data=AdvertisementDeliveryOptionCallbackData(
                        option=DeliveryOption.WORLD,
                    ).pack(),
                ),
            ],
        ],
    )


class AdvertisementCityListView(TextView):
    text = 'üèôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:'

    def __init__(self, cities: Iterable):
        self.__cities = tuple(cities)

    def get_reply_markup(self) -> InlineKeyboardMarkup:
        keyboard = InlineKeyboardBuilder()
        for city in self.__cities:
            keyboard.button(
                text=city.name,
                callback_data=AdvertisementCityCallbackData(city_id=city.id),
            )
        keyboard.adjust(1)
        return keyboard.as_markup()


class AdvertisementPhoneNumberView(TextView):
    text = 'üì± –•–æ—Ç–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏?'
    reply_markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text='–î–∞',
                    callback_data=AdvertisementPhoneNumberVisibilityCallbackData(
                        is_visible=True,
                    ).pack(),
                ),
            ],
            [
                InlineKeyboardButton(
                    text='–ù–µ—Ç',
                    callback_data=AdvertisementPhoneNumberVisibilityCallbackData(
                        is_visible=False,
                    ).pack(),
                )
            ]
        ],
    )


class AdvertisementCreateConfirmView(TextView):
    text = 'üëç –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ!'
    reply_markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text='‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å',
                    callback_data='publish_advertisement',
                ),
            ],
            [
                InlineKeyboardButton(
                    text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å',
                    callback_data='cancel_advertisement',
                ),
            ],
        ],
    )


class AdvertisementView(TextView):

    def __init__(
        self,
        advertisement: Advertisement,
    ):
        self.__advertisement = advertisement

    def get_text(self) -> str:
        lines = [
            f'#{self.__advertisement.category.hashtag.value}',
            f'{self.__advertisement.type},'
            f' {self.__advertisement.product_condition.value}'
            f' | {self.__advertisement.id_.value}',
            f'{self.__advertisement.user.name.value},'
            f' {self.__advertisement.city.name.value}',
            f'<b>{self.__advertisement.title.value}</b>',
            f'<i>{self.__advertisement.description.value}</i>\n',
            f'{self.__advertisement.price.value} KGS |'
            f' {self.__advertisement.delivery_option.value}\n',
        ]
        if self.__advertisement.is_phone_number_visible.value:
            lines.append(
                'üì≤ <span class="tg-spoiler">'
                f'{self.__advertisement.user.phone_number.value}</span>\n',
            )
        else:
            lines.append(f'üì≤ <span class="tg-spoiler">–°–∫—Ä—ã—Ç</span>\n')
        lines.append('üì¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ')
        if self.__advertisement.user.username.value is not None:
            lines.append(
                f' @'
                f'{self.__advertisement.user.username.value}',
            )
        return '\n'.join(lines)
